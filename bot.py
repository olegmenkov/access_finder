import logging
import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from geopy.distance import geodesic
from dotenv import load_dotenv
import os

from map_functions import get_coordinates, get_accessible_places, get_address

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≥—Ä—è–∑–Ω–æ, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç -- –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–± –±—ã–ª–æ –±–æ–ª–µ–µ –∏–∑—è—â–Ω–æ)
user_coordinates = {}

YANDEX_MAPS_URL = "https://yandex.ru/maps/?ll={lon}%2C{lat}&z=16"


class BotStates(StatesGroup):
    waiting_for_district = State()
    # –Ω–æ–≤–æ–µ_–∏–º—è_—Å–æ—Å—Ç–æ—è–Ω–∏—è = State()


@dp.message(Command("start"))
async def send_welcome(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ"""
    commands_list = """
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! 
–Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –º–∞–ª–æ–º–æ–±–∏–ª—å–Ω—ã–º –ª—é–¥—è–º –≤ –ú–æ—Å–∫–≤–µ.
–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–±–æ–ª—å—à–µ –æ —Ç–æ–º, —á—Ç–æ —è —É–º–µ—é, –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /about
"""
    await message.answer(commands_list)


@dp.message(Command("about"))
async def send_about(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /about, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–º–æ—â—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    help_text = """
–£ –º–µ–Ω—è –µ—Å—Ç—å —Ç–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/sos - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É–∂–±
/search - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–ª—è—Å–∫–µ
/contacts - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–º–æ–≥–∞—é—â–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≥. –ú–æ—Å–∫–≤—ã
/about - –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º
"""
    await message.answer(help_text)


@dp.message(Command("sos"))
async def send_sos(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /sos, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ —Å–ª—É–∂–±"""
    phones = """
üöí –ü–æ–∂–∞—Ä–Ω–∞—è –æ—Ö—Ä–∞–Ω–∞ –∏ —Å–ø–∞—Å–∞—Ç–µ–ª–∏: 101
üöî –ü–æ–ª–∏—Ü–∏—è: 102
üöë –°–∫–æ—Ä–∞—è –ø–æ–º–æ—â—å: 103
üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã: 112
"""
    await message.answer(phones)


@dp.message(Command("contacts"))
async def send_contacts(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /send_contacts, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä–∞ —Å–ª—É–∂–±"""
    phones = """
üßë‚Äçü¶º –ì–æ—Ä—è—á–∞—è –ª–∏–Ω–∏—è –†–µ—Å—É—Ä—Å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –¥–ª—è –ª—é–¥–µ–π —Å –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å—é: +7 (495) 870-44-44
‚ìÇÔ∏è –¶–µ–Ω—Ç—Ä –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏ –º–µ—Ç—Ä–æ	+7 (800) 250-73-41, +7 (495) 622-73-41
üöï –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ —Ç–∞–∫—Å–∏: +7 (499) 999-02-37
üó£Ô∏è –ú–æ—Å–∫–æ–≤—Å–∫–∞—è —Å–ª—É–∂–±–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—é: +7 (495) 575-87-70 
"""
    await message.answer(phones)


@dp.message(Command("search"))
async def start_search(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /search, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞"""
    await message.answer("–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–ª—è—Å–∫–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ –ú–æ—Å–∫–≤—ã –∏–ª–∏ –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞, —Ä—è–¥–æ–º —Å –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å:")
    await state.set_state(BotStates.waiting_for_district)


@dp.message(BotStates.waiting_for_district)
async def process_district(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–∞"""
    district = message.text
    coordinates = await get_coordinates(district)
    if not coordinates:
        await message.answer("–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–∞–∫–æ–≥–æ —Ä–∞–π–æ–Ω–∞ –∏–ª–∏ –º–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ-–¥—Ä—É–≥–æ–º—É.")
        await state.set_state(BotStates.waiting_for_district)
        return

    user_coordinates[message.chat.id] = coordinates

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    builder = InlineKeyboardBuilder()
    categories = ["–∫–∞—Ñ–µ", "–º–∞–≥–∞–∑–∏–Ω—ã", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–º—É–∑–µ–∏", "–±–æ–ª—å–Ω–∏—Ü—ã"]
    for category in categories:
        builder.add(types.InlineKeyboardButton(
            text=category.capitalize(), callback_data=f"category_{category}")
        )
    builder.adjust(2)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=builder.as_markup())

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@dp.callback_query(lambda c: c.data.startswith('category_'))
async def process_category(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.split('_')[1]
    user_id = callback.message.chat.id

    if user_id not in user_coordinates:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞ –∏–ª–∏ –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞.")
        return

    await callback.message.answer(f"üîç –ò—â—É {category} –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏...")
    await callback.message.delete()



    lat, lon = user_coordinates[user_id]
    places = await get_accessible_places(lat, lon, category)

    if not places:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return

    await callback.message.answer(f"–ù–∞—à—ë–ª! –í–æ—Ç –º–µ—Å—Ç–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–ª—è—Å–∫–µ:")

    for place in places:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –æ—Ç–º–µ—Ç–∫–æ–π —Ç–æ—á–∫–∏
        yandex_url = f"https://yandex.ru/maps/?ll={place['lon']},{place['lat']}&pt={place['lon']},{place['lat']},pm2blm&z=16"
        address = get_address(place["lat"], place["lon"])
        await callback.message.answer(
            f"{place['name']}\n"
            f"üè† –ê–¥—Ä–µ—Å: {address}\n"
            f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {place['lat']}, {place['lon']}\n"
            f"üó∫Ô∏è –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã: {yandex_url}"
        )


if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
